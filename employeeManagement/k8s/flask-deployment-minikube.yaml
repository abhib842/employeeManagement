apiVersion: apps/v1
kind: Deployment
metadata:
  name: employee-flask-app
  namespace: employee-management
  labels:
    app: employee-flask-app
spec:
  replicas: 4
  selector:
    matchLabels:
      app: employee-flask-app
  template:
    metadata:
      labels:
        app: employee-flask-app
    spec:
      containers:
      - name: flask-app
        image: employee-flask-app:latest
        imagePullPolicy: Never  # Use local image
        ports:
        - containerPort: 5000
        env:
        - name: DB_HOST
          value: "employee-mysql-service"
        - name: DB_USER
          value: "employee_user"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: user-password
        - name: DB_NAME
          value: "employee_db"
        - name: DB_PORT
          value: "3306"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: employee-flask-service
  namespace: employee-management
  labels:
    app: employee-flask-app
spec:
  selector:
    app: employee-flask-app
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: employee-flask-ingress
  namespace: employee-management
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    # Minikube specific annotations
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: employee-api.local  # Will be accessible via minikube IP
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: employee-flask-service
            port:
              number: 80 